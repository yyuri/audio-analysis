{"remainingRequest":"/home/yyuri/Documentos/pocSorroll/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yyuri/Documentos/pocSorroll/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/yyuri/Documentos/pocSorroll/src/App.vue","mtime":1604263699815},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnNlbGVjdGFibGUgewogIHBvaW50ZXItZXZlbnRzOm5vbmU7Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6aA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <v-app >\n    <v-main>\n      <audio src=\"@/assets/song2.mp3\" id=\"audio\" crossorigin=\"anonymous\" ref=\"audio\"></audio>\n      <v-container fluid>\n        <div\n          class=\"text-h6 transition-swing text-center mt-6\"\n        >\n          Analyze and Select samples from audio files\n       </div>\n       <div\n         class=\"caption transition-swing text-center mb-6\"\n       >\n         Yumeji's Theme sample data\n      </div>\n      <div class=\"d-flex justify-center mb-3 mt-1\">\n        <v-btn @click=\"selectable=true;pause();\">Create sample</v-btn>\n        <v-btn v-if=\"!playing\" @click=\"play()\" @keyup.prevent=\"(e) => event.preventDefault()\" style=\"z-index:1\" class=\"mt-n4 mx-n2 elevation-2\" fab large >\n          <v-icon large color=\"green darken-1\">mdi-play</v-icon>\n        </v-btn>\n        <v-btn v-else @click=\"pause();\" @keyup.prevent=\"(e) => event.preventDefault()\" style=\"z-index:1\" class=\"mt-n4 mx-n2 elevation-2\" fab large >\n          <v-icon large color=\"red darken-2\">mdi-pause</v-icon>\n        </v-btn>\n        <v-btn style=\"z-index:0\" @click=\"clearAll\">Clean samples</v-btn>\n      </div>\n        <v-card  flat class=\"mx-auto my-auto\" :width=\"width*0.7\">\n\n          <BarChart :height=\"190\" :updateChart=\"updateBarChart\" :dataarray=\"dataArray\"/>\n\n          <LineChart\n          :chartData=\"data\"\n          :options=\"options\"\n          :range=\"range\"\n          :height=\"400\"\n          @setrange=\"setRange\"\n          @chartobject=\"overlayLayer\" refs=\"chart\" id=\"chart\" @start=\"startSelection\" @movement=\"movementSelection\" @stop=\"stopSelection\" :selectable=\"selectable\"\n          ref=\"linechart\"\n          @goToFrame=\"goToFrame\"\n          />\n\n            <canvas id=\"overlay\"\n            width=\"1200\"\n            height=\"400\"\n            class=\"selectable\"\n            @mousedown=\"startSelection\"\n            @mousemove=\"movementSelection\"\n            @mouseup=\"stopSelection\"\n            ref=\"overlaychart\"\n            />\n\n\n          <RangeSlider @setrange=\"setRange\" :min=\"datasetstart\" :max=\"datasetend\" :width=\"width*0.9\"/>\n\n        </v-card>\n\n\n      </v-container>\n\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nimport BarChart from './components/BarChart.vue'\nimport RangeSlider from './components/RangeSlider.vue'\nimport LineChart from './components/LineChart.vue'\n\nimport moment from 'moment'\n\nexport default {\n  name: 'App',\n  components: {\n    BarChart,\n    LineChart,\n    RangeSlider\n  },\n  data: () => ({\n    options: {\n      elements: {\n          point:{\n              radius: 0\n          }\n      },\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        yAxes: [\n          {\n            gridLines: {\n              display: true,\n              offsetGridLines: false,\n            },\n          }],\n          xAxes: [{\n            gridLines: {\n              display: true,\n              offsetGridLines: false,\n              zeroLineWidth: 2,\n              tickMarkLength: 5,\n\n            },\n            ticks: {\n                padding: 10,\n            }\n          }]\n      },\n      legend: {\n          display: false,\n      },\n      animation: {\n        duration: 0\n      }\n    },\n    data: {\n      labels: [],\n      datasets: [{\n          label: 'Sonometria 1',\n          data: [],\n          fill: true,\n        }\n      ]\n    },\n    selectable: false,\n    selectionRect: {\n      w: 0,\n      startX: 0,\n      startY: 0,\n      startIndex: null,\n      stopIndex: null\n    },\n    overlay: null,\n    labels: null,\n    dataset: null,\n    datasetstart: 0,\n    datasetend: 360,\n    range: [0,360],\n    width: window.innerWidth,\n    updateBarChart: false,\n    backgroundcolor: 'hsla(2, 12%, 50%,0.4)',\n    bordercolor: 'hsla(2, 12%, 50%,0.4)',\n    rangeselections: [],\n    dataArray: null,\n    audio: null,\n    source: null,\n    analyser: null,\n    analyserinterval: null,\n    starty: null,\n    stopy: null,\n    chartwidth: null,\n    motion: null,\n    playing: false,\n    overlaybtn: true,\n  }),\n  mounted () {\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    this.audio = document.querySelector('audio');\n    this.source = audioCtx.createMediaElementSource(this.audio);\n\n    let _this = this;\n\n    // We fetch then process the file, we get Db levels of the whole audiofile\n\n    fetch(require('@/assets/song2.mp3'))\n      .then(function(resp) {return resp.arrayBuffer()})\n      .then(audioCtx.decodeAudioData.bind(audioCtx))\n      .then(function(buffer) {\n        let channel = buffer.getChannelData(0);\n\n        let points = [0];\n        let duration = buffer.duration;\n\n        for(let x = 1, i, v; x < duration; x++) {\n          i = ((x / duration) * channel.length)|0;\n          v = Math.abs(getdB(channel, i, 440));\n          points.push(v);\n        }\n        _this.setProccessedData(duration,points);\n        // calculates RMS per window and returns normalized dB\n        function getdB(buffer, pos, winSize) {\n          let sum = 0;\n          for(let v, i = pos - winSize; i <= pos; i++) {\n            v = i < 0 ? 0 : buffer[i];\n            sum += v * v;\n          }\n          let rms = Math.sqrt(sum / winSize);  // corrected!\n          return .4*Math.log10(rms);\n        }\n    });\n\n    //Create analyser, connect it to source and destination and create buffer array\n    this.analyser = audioCtx.createAnalyser();\n    this.source.connect(this.analyser);\n    this.analyser.connect(audioCtx.destination);\n    this.analyser.smoothingTimeConstant= 0.7\n    this.analyser.fftSize = 64; //Sample rate is 44100hz, we have enough accuracy with 64 .\n\n\n\n    //We are adding keydown control\n    window.addEventListener('keydown', this.switcher);\n  },\n  destroyed () {\n    window.removeEventListener('keydown', this.switcher);\n  },\n  methods: {\n    switcher(e) {\n      if(e.code === 'Space') {\n        if(this.audio.paused) {\n          this.play();\n        }\n        else {\n          this.pause();\n        }\n      }\n      else if(e.code === 'ArrowRight') {\n        this.audio.currentTime += 3;\n        let x = this.chartwidth*this.audio.currentTime / this.source.mediaElement.duration ;\n        this.overlay.clearRect(0, 0, this.overlay.canvas.width, this.overlay.canvas.height);\n        this.overlay.fillRect(x,this.starty,-6,this.stopy);\n      }\n      else if(e.code === 'ArrowLeft') {\n        this.audio.currentTime -= 3;\n        let x = this.chartwidth*this.audio.currentTime / this.source.mediaElement.duration ;\n        this.overlay.clearRect(0, 0, this.overlay.canvas.width, this.overlay.canvas.height);\n        this.overlay.fillRect(x,this.starty,-6,this.stopy);\n      }\n    },\n    play() {\n      this.playing = true;\n      this.audio.play();\n\n      //let labels = [\"20Hz\", \"25 Hz\", \"31.5 Hz\", \"40 Hz\", \"50 Hz\", \"63 Hz\", \"80 Hz\", \"100 Hz\", \"125 Hz\", \"160 Hz\", \"200 Hz\", \"250 Hz\", \"315 Hz\", \"400 Hz\", \"500 Hz\", \"630 Hz\", \"800 Hz\", \"1000 Hz\", \"1250 Hz\", \"1600 Hz\", \"2000 Hz\", \"2500 Hz\", \"3150 Hz\", \"4000 Hz\", \"5000 Hz\", \"6300 Hz\", \"8000 Hz\", \"10 kHz\", \"12,5 kHz\", \"16 kHz\", \"20 kHz\"];\n      this.analyserinterval = setInterval(() => {\n        let buffer = this.analyser.frequencyBinCount;\n        this.dataArray = new Uint8Array(buffer);\n        this.analyser.getByteFrequencyData(this.dataArray);\n        this.updateBarChart = !this.updateBarChart;\n      }, 90);\n      this.motion = window.requestAnimationFrame(this.progressBar)\n      //this.motion = window.requestAnimationFrame(this.progressBar);\n    },\n    pause() {\n      this.playing = false;\n      this.audio.pause();\n      clearInterval(this.analyserinterval);\n      window.cancelAnimationFrame(this.motion);\n    },\n    goToFrame(point) {\n      if(!this.selectable) {\n        this.audio.currentTime= (point._index+this.range[0]);\n        let x = (point._index/(this.range[1]-this.range[0])) * this.chartwidth;\n        this.overlay.globalAlpha = 0.5;\n        this.overlay.clearRect(0, 0, this.overlay.canvas.width, this.overlay.canvas.height);\n        this.overlay.fillRect(x,this.starty,-6,this.$refs.linechart._data._chart.scales['x-axis-0'].top-7);\n      }\n    },\n    progressBar() {\n      if(!this.audio.paused) {\n          let x = ((this.source.mediaElement.currentTime-this.range[0]) / (this.range[1]-this.range[0])) * this.chartwidth;\n          this.overlay.globalAlpha = 0.5;\n          this.overlay.clearRect(0, 0, this.overlay.canvas.width, this.overlay.canvas.height);\n          this.overlay.fillRect(x,this.starty,-6,this.$refs.linechart._data._chart.scales['x-axis-0'].top-7);\n          window.requestAnimationFrame(this.progressBar)\n      }\n      else {\n        let x = ((this.source.mediaElement.currentTime-this.range[0]) / (this.range[1]-this.range[0])) * this.chartwidth;\n        this.overlay.globalAlpha = 0.5;\n        this.overlay.clearRect(0, 0, this.overlay.canvas.width, this.overlay.canvas.height);\n        this.overlay.fillRect(x,this.starty,-6,this.$refs.linechart._data._chart.scales['x-axis-0'].top-7);\n      }\n    },\n    setProccessedData(duration,points) {\n      this.datasetend = Math.floor(duration);\n      this.range = [0,Math.floor(duration)];\n      this.labels = this.dBLabels();\n      this.dataset = this.dBData(points);\n      this.backgroundcolor = 'hsl(0, 0%, 53%,0.2)'\n      this.data = {\n        labels: this.labels,\n        datasets: [{\n            label: 'Sonometria 1',\n            data: this.dataset,\n            borderColor: this.bordercolor,\n            backgroundColor: this.backgroundcolor,\n            borderWidth: 2,\n            fill: true,\n          },\n        ]\n      }\n    },\n    dBData(points) {\n      let data = [];\n      for(let i=this.datasetstart; i<this.datasetend; i++) {\n        data.push(points[i]);\n      }\n      return data\n    },\n    dBLabels() {\n      let labels = [];\n      for(let i=this.datasetstart; i<this.datasetend; i++) {\n        labels.push(moment().startOf('day').add(1*i, 'seconds').format('H:mm:ss'))\n      }\n      return labels\n    },\n    clearAll() {\n      let labels = this.labels.slice(this.range[0], this.range[1]+1);\n      let dataset = this.dataset.slice(this.range[0],this.range[1]+1);\n      this.rangeselections = [];\n      this.data = {\n        labels: labels,\n        datasets: [{\n            label: 'Sonometria 1',\n            data: dataset,\n            borderColor: this.bordercolor,\n            borderWidth: 2,\n            backgroundColor: this.backgroundcolor,\n            fill: true\n          }\n        ]\n      };\n    },\n    setRange(a) {\n      let start = a[0];\n      let end = a[1];\n      this.range = a;\n      let labels = this.labels.slice(start, end+1);\n      let datasets = [];\n      datasets.push(this.dataset.slice(start,end+1));\n      for(let i=0; i<this.rangeselections.length; i++) {\n        let selection = this.dataset.slice(this.rangeselections[i],this.rangeselections[i+1]+1);\n        let firstpart = Array(this.rangeselections[i]).fill(null);\n        let secondpart = Array(this.datasetend-this.rangeselections[i+1]).fill(null);\n        let d = firstpart.concat(selection).concat(secondpart)\n        datasets.push(d.slice(start,end+1));\n        i = i+1;\n      }\n      let backgrounds = [this.backgroundcolor, \"#FDD8358C\", \"#B39DDB8C\", \"#9FA8DA8C\", \"#EF9A9A8C\", \"#F48FB18C\", \"#CE93D88C\",'#80CBC48C','#BCAAA48C']\n      let sliceddatasets = [];\n      for(let i=0;i<datasets.length;i++) {\n        sliceddatasets.push(\n          {\n            data: datasets[i],\n            borderColor: this.bordercolor,\n            backgroundColor: backgrounds[i%backgrounds.length],\n            borderWidth: 2,\n            fill: true\n          }\n        )\n      }\n      this.data = {\n        labels: labels,\n        datasets: sliceddatasets\n      };\n      let x = ((this.source.mediaElement.currentTime-this.range[0]) / (this.range[1]-this.range[0])) * this.chartwidth;\n      this.overlay.globalAlpha = 0.5;\n      this.overlay.clearRect(0, 0, this.overlay.canvas.width, this.overlay.canvas.height);\n      this.overlay.fillRect(x,this.starty,-6,this.$refs.linechart._data._chart.scales['x-axis-0'].top-7);\n    },\n    //This next three functions are handling user inputs when selecting areas of the chart\n    startSelection(e,point) {\n      this.selectionRect.startIndex = point._index+this.range[0];\n      this.selectionRect.startX = point._view.x;\n      this.selectionRect.startY = this.starty;\n    },\n    movementSelection(evt,drag,point) {\n      if (drag && this.selectionRect.stopIndex !== point._index && this.selectionRect.startIndex !== null) {\n        this.selectionRect.stopIndex = point._index+this.range[0];\n        this.selectionRect.w = (point._view.x) - this.selectionRect.startX;\n        this.overlay.globalAlpha = 0.5;\n        this.overlay.clearRect(0, 0, this.overlay.canvas.width, this.overlay.canvas.height);\n        this.overlay.fillRect(this.selectionRect.startX-34,\n          this.starty,\n          this.selectionRect.w,\n          this.stopy);\n      }\n      else if(this.selectionRect.startIndex == null) {\n        this.overlay.globalAlpha = 0.5;\n        let x = point._view.x;\n        console.log(x)\n        console.log(point._index)\n\n        this.overlay.clearRect(0, 0, this.overlay.canvas.width, this.overlay.canvas.height);\n        this.overlay.fillRect(x-34,this.starty,2,this.stopy);\n      }\n    },\n    stopSelection() {\n      this.overlay.clearRect(0, 0, this.overlay.canvas.width, this.overlay.canvas.height);\n      this.addNewSelection(Math.min(this.selectionRect.startIndex,this.selectionRect.stopIndex), Math.max(this.selectionRect.startIndex,this.selectionRect.stopIndex) )\n      this.selectionRect = {\n        w: 0,\n        startX: 0,\n        startY: 0,\n        startIndex: null,\n        stopIndex: null\n      };\n      this.selectable = false;\n\n\n    },\n    addNewSelection(min,max) {\n      this.rangeselections.push(min);\n      this.rangeselections.push(max);\n      this.setRange(this.range);\n      this.audio.currentTime= (max+min);\n      let x = ((min-this.range[0]) / (this.range[1]-this.range[0])) * this.chartwidth;\n      this.overlay.globalAlpha = 0.5;\n      this.overlay.clearRect(0, 0, this.overlay.canvas.width, this.overlay.canvas.height);\n      this.overlay.fillRect(x,this.starty,-6,this.$refs.linechart._data._chart.scales['x-axis-0'].top-7);\n    },\n    overlayLayer(e) {\n      const c = document.getElementById('overlay');\n\n      c.style.position = \"absolute\";\n      c.style.top = e.canvas.offsetTop+'px';\n      c.style.left = '33px';\n\n      const ctx = c.getContext(\"2d\");\n      ctx.canvas.width = e.chart.width-33;\n      ctx.canvas.height = e.chart.height;\n      this.starty = e.chart.scales['y-axis-0'].top\n      this.stopy = e.chart.scales['y-axis-0'].bottom-37\n      this.chartwidth = e.chart.chartArea.right - e.chart.chartArea.left+5\n      this.overlay = ctx;\n    }\n  }\n}\n</script>\n\n<style>\n.selectable {\n  pointer-events:none;\n}\n</style>\n"]}]}