{"remainingRequest":"/home/yyuri/Documentos/pocSorroll/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yyuri/Documentos/pocSorroll/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/yyuri/Documentos/pocSorroll/src/App.vue","mtime":1603990356787},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <v-app>\n    <v-main>\n      <audio src=\"@/assets/song.mp3\" id=\"audio\" crossorigin=\"anonymous\" ref=\"audio\"></audio>\n      <v-container fluid>\n        <div\n          class=\"text-h6 transition-swing text-center my-6\"\n        >\n          Prova de concepte: Selector d'audio amb ChartJS\n       </div>\n       <div\n         class=\"text-h6 transition-swing text-center\"\n       >\n      </div>\n        <v-card flat class=\"mx-auto my-auto\" :width=\"width*0.7\">\n\n          <BarChart :height=\"190\" :random=\"randombars\" :dataarray=\"dataArray\"/>\n\n          <LineChart\n          :chartData=\"data\"\n          :options=\"options\"\n          :range=\"range\"\n          :height=\"400\"\n          @setrange=\"setRange\"\n          @chartobject=\"chartobject\" refs=\"chart\" id=\"chart\" @start=\"start\" @movement=\"movement\" @stop=\"stop\" :selectable=\"selectable\"/>\n\n          <canvas id=\"overlay\"\n          width=\"1200\"\n          height=\"400\"\n          style=\"position:absolute;top:0;\"\n          class=\"selectable\"\n          @mousedown=\"start\"\n          @mousemove=\"movement\"\n          @mouseup=\"stop\"\n          />\n          <RangeSlider @setrange=\"setRange\" :min=\"datasetstart\" :max=\"datasetend\" :width=\"width*0.9\"/>\n\n          <div class=\"d-flex justify-center\">\n            <v-btn @click=\"selectable=true\">Fer una selecció</v-btn>\n            <v-btn @click=\"clearAll\">Netejar seleccions</v-btn>\n          </div>\n\n          <div class=\"d-flex justify-center\">\n            <v-btn icon @click=\"() => audio.play()\"><v-icon>mdi-play</v-icon></v-btn>\n            <v-btn icon @click=\"() => audio.pause()\"><v-icon>mdi-pause</v-icon></v-btn>\n          </div>\n        </v-card>\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nimport BarChart from './components/BarChart.vue'\nimport RangeSlider from './components/RangeSlider.vue'\nimport LineChart from './components/LineChart.vue'\n\nimport moment from 'moment'\n\nexport default {\n  name: 'App',\n  components: {\n    BarChart,\n    LineChart,\n    RangeSlider\n  },\n  data: () => ({\n    options: {\n      elements: {\n          point:{\n              radius: 0\n          }\n      },\n      responsive: true,\n      maintainAspectRatio: false,\n      pointDotRadius: 1,\n      pointDotStrokeWidth: 18,\n      pointHitDetectionRadius: 20,\n      scales: {\n        yAxes: [\n          {\n            gridLines: {\n              display: true,\n              offsetGridLines: false,\n            },\n          }],\n          xAxes: [{\n            gridLines: {\n              display: true,\n              offsetGridLines: false,\n              zeroLineWidth: 2,\n            }\n          }]\n      },\n      legend: {\n          display: false,\n      },\n      animation: {\n        duration: 0\n      }\n    },\n    data: {\n      labels: [],\n      datasets: [{\n          label: 'Sonometria 1',\n          data: [],\n          fill: true,\n        }\n      ]\n    },\n    selectable: false,\n    selectionContext: null,\n    selectionRect: {\n      w: 0,\n      startX: 0,\n      startY: 0,\n      startIndex: null,\n      stopIndex: null\n    },\n    chart: null,\n    overlay: null,\n    labels: null,\n    dataset: null,\n    datasetstart: 0,\n    datasetend: 360,\n    range: [0,360],\n    height: window.innerHeight,\n    width: window.innerWidth,\n    randombars: false,\n    backgroundcolor: 'hsla(2, 12%, 50%,0.4)',\n    bordercolor: 'hsla(2, 12%, 50%,0.4)',\n    rangeselections: [],\n    dataArray: null,\n    audio: null,\n  }),\n  mounted () {\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    this.audio = document.querySelector('audio');\n    const source = audioCtx.createMediaElementSource(this.audio);\n\n    // Once the metadata has been loaded, display the duration in the console\n    this.audio.addEventListener('loadedmetadata', () => {\n        // Obtain the duration in seconds of the audio file (with milliseconds as well, a float value)\n        let duration = parseInt(this.audio.duration);\n\n        // example 12.3234 seconds\n        console.log(\"The duration of the song is of: \" + duration + \" seconds\");\n        // Alternatively, just display the integer value with\n        // parseInt(duration)0, 1\n        // 12 seconds\n        this.setDb(duration)\n    },false);\n\n\n    const analyser = audioCtx.createAnalyser();\n    analyser.fftSize = 64; //256 samples //Sample rate is 44100hz, so getByteFrequencyData last element is 22050hz\n    let buffer = analyser.frequencyBinCount;\n\n    this.dataArray = new Uint8Array(buffer);\n\n    source.connect(analyser);\n    analyser.connect(audioCtx.destination);\n\n\n\n    setInterval(() => {\n      analyser.getByteFrequencyData(this.dataArray);\n      this.randombars = !this.randombars;\n\n    }, 50);\n\n  },\n  methods: {\n    setDb(duration) {\n      console.log('Duration is:' + duration)\n      this.datasetend = duration;\n      this.range = [0,duration];\n      this.labels = this.fakeLabels();\n      this.dataset = this.fakeData();\n      this.backgroundcolor = 'hsl(0, 0%, 53%,0.2)'\n      this.data = {\n        labels: this.labels,\n        datasets: [{\n            label: 'Sonometria 1',\n            data: this.dataset,\n            borderColor: this.bordercolor,\n            backgroundColor: this.backgroundcolor,\n            borderWidth: 2,\n            fill: true,\n          }\n        ]\n      }\n    },\n    fakeLabels() {\n      let labels = [];\n      console.log(this.datasetend)\n      for(let i=this.datasetstart; i<this.datasetend/60; i++) {\n        labels.push(moment().startOf('day').add(1*i, 'minutes').format('H:mm:ss'))\n      }\n      return labels\n    },\n    fakeData() {\n      let data = [];\n      for(let i=this.datasetstart; i<this.datasetend-1; i++) {\n        if (Math.floor(i/20)%2) {\n          data.push(Math.floor(Math.random() * 40))\n        }\n        else {\n          data.push(Math.floor(Math.random() * (80 - 30 + 1)) + 30)\n        }\n      }\n      return data\n    },\n    clearAll() {\n      let labels = this.labels.slice(this.range[0], this.range[1]+1);\n      let dataset = this.dataset.slice(this.range[0],this.range[1]+1);\n      this.rangeselections = [];\n      this.data = {\n        labels: labels,\n        datasets: [{\n            label: 'Sonometria 1',\n            data: dataset,\n            borderColor: this.bordercolor,\n            borderWidth: 2,\n            backgroundColor: this.backgroundcolor,\n            fill: true\n          }\n        ]\n      };\n    },\n    setRange(a) {\n      console.log(a)\n      let start = a[0];\n      let end = a[1];\n      this.range = a;\n      let labels = this.labels.slice(start/60, (end+1)/60);\n      let datasets = [];\n      datasets.push(this.dataset.slice(start,end+1));\n\n      for(let i=0; i<this.rangeselections.length; i++) {\n        let selection = this.dataset.slice(this.rangeselections[i],this.rangeselections[i+1]+1);\n        let firstpart = Array(this.rangeselections[i]).fill(null);\n        let secondpart = Array(this.datasetend-this.rangeselections[i+1]).fill(null);\n        let d = firstpart.concat(selection).concat(secondpart)\n        datasets.push(d.slice(start,end+1));\n        i = i+1;\n      }\n\n      let backgrounds = [this.backgroundcolor, \"#FDD8358C\", \"#B39DDB8C\", \"#9FA8DA8C\", \"#EF9A9A8C\", \"#F48FB18C\", \"#CE93D88C\",'#80CBC48C','#BCAAA48C']\n      let sliceddatasets = [];\n      for(let i=0;i<datasets.length;i++) {\n        sliceddatasets.push(\n          {\n            data: datasets[i],\n            borderColor: this.bordercolor,\n            backgroundColor: backgrounds[i%backgrounds.length],\n            borderWidth: 2,\n            fill: true\n          }\n        )\n      }\n      this.data = {\n        labels: labels,\n        datasets: sliceddatasets\n      };\n      this.randombars = !this.randombars;\n    },\n    start(e,point) {\n///      let rect = this.chart.canvas.getBoundingClientRect()\n      this.selectionRect.startIndex = point._index+this.range[0];\n      this.selectionRect.startX = point._view.x;\n      this.selectionRect.startY = this.chart.chartArea.top+this.chart.canvas.offsetTop;\n\n    },\n    movement(evt,drag,point) {\n      //this.changecolors(Math.min(this.selectionRect.startIndex,this.selectionRect.stopIndex), Math.max(this.selectionRect.startIndex,this.selectionRect.stopIndex) )\n      let rect = this.overlay.canvas.getBoundingClientRect()\n      this.selectionContext = this.overlay\n\n      if (drag && this.selectionRect.stopIndex !== point._index && this.selectionRect.startIndex !== null) {\n        this.selectionRect.stopIndex = point._index+this.range[0];\n        this.selectionRect.w = (point._view.x) - this.selectionRect.startX;\n\n        this.selectionContext.globalAlpha = 0.5;\n        this.selectionContext.clearRect(0, 0, rect.width, rect.height);\n        this.selectionContext.fillRect(this.selectionRect.startX,\n          this.selectionRect.startY,\n          this.selectionRect.w,\n          this.chart.chartArea.bottom-this.chart.chartArea.top);\n      }\n      else if(this.selectionRect.startIndex == null) {\n        this.selectionRect.startY = this.chart.chartArea.top+this.chart.canvas.offsetTop;\n\n        this.selectionContext.clearRect(0, 0, rect.width, rect.height);\n\n        let x = point._view.x;\n\n        this.selectionContext.fillRect(x,this.chart.chartArea.top+this.chart.canvas.offsetTop,1,this.chart.chartArea.bottom-this.chart.chartArea.top);\n      }\n\n    },\n    stop() {\n      let rect = this.overlay.canvas.getBoundingClientRect()\n      this.selectionContext.clearRect(0, 0, rect.width, rect.height);\n      this.addNewSelection(Math.min(this.selectionRect.startIndex,this.selectionRect.stopIndex), Math.max(this.selectionRect.startIndex,this.selectionRect.stopIndex) )\n      this.selectionRect = {\n        w: 0,\n        startX: 0,\n        startY: 0,\n        startIndex: null,\n        stopIndex: null\n      };\n      this.selectable = false;\n    },\n    addNewSelection(min,max) {\n      this.rangeselections.push(min);\n      this.rangeselections.push(max);\n      this.setRange(this.range);\n    },\n    chartobject(e) {\n      this.chart = e;\n      const c = document.getElementById('overlay');\n      const ctx = c.getContext(\"2d\");\n      this.overlay = ctx;\n      this.overlay.canvas.width = this.chart.chart.width-12;\n      this.overlay.canvas.height = this.chart.chart.height+this.chart.canvas.getBoundingClientRect().y;\n    }\n  }\n}\n</script>\n\n<style>\n.selectable {\n  pointer-events:none;\n}\n</style>\n"]}]}