{"remainingRequest":"/home/yyuri/Documentos/pocSorroll/node_modules/babel-loader/lib/index.js!/home/yyuri/Documentos/pocSorroll/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/yyuri/Documentos/pocSorroll/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/yyuri/Documentos/pocSorroll/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/yyuri/Documentos/pocSorroll/src/App.vue","mtime":1603990356787},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/yyuri/Documentos/pocSorroll/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-app>\n    <v-main>\n      <audio src=\"@/assets/song.mp3\" id=\"audio\" crossorigin=\"anonymous\" ref=\"audio\"></audio>\n      <v-container fluid>\n        <div\n          class=\"text-h6 transition-swing text-center my-6\"\n        >\n          Prova de concepte: Selector d'audio amb ChartJS\n       </div>\n       <div\n         class=\"text-h6 transition-swing text-center\"\n       >\n      </div>\n        <v-card flat class=\"mx-auto my-auto\" :width=\"width*0.7\">\n\n          <BarChart :height=\"190\" :random=\"randombars\" :dataarray=\"dataArray\"/>\n\n          <LineChart\n          :chartData=\"data\"\n          :options=\"options\"\n          :range=\"range\"\n          :height=\"400\"\n          @setrange=\"setRange\"\n          @chartobject=\"chartobject\" refs=\"chart\" id=\"chart\" @start=\"start\" @movement=\"movement\" @stop=\"stop\" :selectable=\"selectable\"/>\n\n          <canvas id=\"overlay\"\n          width=\"1200\"\n          height=\"400\"\n          style=\"position:absolute;top:0;\"\n          class=\"selectable\"\n          @mousedown=\"start\"\n          @mousemove=\"movement\"\n          @mouseup=\"stop\"\n          />\n          <RangeSlider @setrange=\"setRange\" :min=\"datasetstart\" :max=\"datasetend\" :width=\"width*0.9\"/>\n\n          <div class=\"d-flex justify-center\">\n            <v-btn @click=\"selectable=true\">Fer una selecció</v-btn>\n            <v-btn @click=\"clearAll\">Netejar seleccions</v-btn>\n          </div>\n\n          <div class=\"d-flex justify-center\">\n            <v-btn icon @click=\"() => audio.play()\"><v-icon>mdi-play</v-icon></v-btn>\n            <v-btn icon @click=\"() => audio.pause()\"><v-icon>mdi-pause</v-icon></v-btn>\n          </div>\n        </v-card>\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nimport BarChart from './components/BarChart.vue'\nimport RangeSlider from './components/RangeSlider.vue'\nimport LineChart from './components/LineChart.vue'\n\nimport moment from 'moment'\n\nexport default {\n  name: 'App',\n  components: {\n    BarChart,\n    LineChart,\n    RangeSlider\n  },\n  data: () => ({\n    options: {\n      elements: {\n          point:{\n              radius: 0\n          }\n      },\n      responsive: true,\n      maintainAspectRatio: false,\n      pointDotRadius: 1,\n      pointDotStrokeWidth: 18,\n      pointHitDetectionRadius: 20,\n      scales: {\n        yAxes: [\n          {\n            gridLines: {\n              display: true,\n              offsetGridLines: false,\n            },\n          }],\n          xAxes: [{\n            gridLines: {\n              display: true,\n              offsetGridLines: false,\n              zeroLineWidth: 2,\n            }\n          }]\n      },\n      legend: {\n          display: false,\n      },\n      animation: {\n        duration: 0\n      }\n    },\n    data: {\n      labels: [],\n      datasets: [{\n          label: 'Sonometria 1',\n          data: [],\n          fill: true,\n        }\n      ]\n    },\n    selectable: false,\n    selectionContext: null,\n    selectionRect: {\n      w: 0,\n      startX: 0,\n      startY: 0,\n      startIndex: null,\n      stopIndex: null\n    },\n    chart: null,\n    overlay: null,\n    labels: null,\n    dataset: null,\n    datasetstart: 0,\n    datasetend: 360,\n    range: [0,360],\n    height: window.innerHeight,\n    width: window.innerWidth,\n    randombars: false,\n    backgroundcolor: 'hsla(2, 12%, 50%,0.4)',\n    bordercolor: 'hsla(2, 12%, 50%,0.4)',\n    rangeselections: [],\n    dataArray: null,\n    audio: null,\n  }),\n  mounted () {\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    this.audio = document.querySelector('audio');\n    const source = audioCtx.createMediaElementSource(this.audio);\n\n    // Once the metadata has been loaded, display the duration in the console\n    this.audio.addEventListener('loadedmetadata', () => {\n        // Obtain the duration in seconds of the audio file (with milliseconds as well, a float value)\n        let duration = parseInt(this.audio.duration);\n\n        // example 12.3234 seconds\n        console.log(\"The duration of the song is of: \" + duration + \" seconds\");\n        // Alternatively, just display the integer value with\n        // parseInt(duration)0, 1\n        // 12 seconds\n        this.setDb(duration)\n    },false);\n\n\n    const analyser = audioCtx.createAnalyser();\n    analyser.fftSize = 64; //256 samples //Sample rate is 44100hz, so getByteFrequencyData last element is 22050hz\n    let buffer = analyser.frequencyBinCount;\n\n    this.dataArray = new Uint8Array(buffer);\n\n    source.connect(analyser);\n    analyser.connect(audioCtx.destination);\n\n\n\n    setInterval(() => {\n      analyser.getByteFrequencyData(this.dataArray);\n      this.randombars = !this.randombars;\n\n    }, 50);\n\n  },\n  methods: {\n    setDb(duration) {\n      console.log('Duration is:' + duration)\n      this.datasetend = duration;\n      this.range = [0,duration];\n      this.labels = this.fakeLabels();\n      this.dataset = this.fakeData();\n      this.backgroundcolor = 'hsl(0, 0%, 53%,0.2)'\n      this.data = {\n        labels: this.labels,\n        datasets: [{\n            label: 'Sonometria 1',\n            data: this.dataset,\n            borderColor: this.bordercolor,\n            backgroundColor: this.backgroundcolor,\n            borderWidth: 2,\n            fill: true,\n          }\n        ]\n      }\n    },\n    fakeLabels() {\n      let labels = [];\n      console.log(this.datasetend)\n      for(let i=this.datasetstart; i<this.datasetend/60; i++) {\n        labels.push(moment().startOf('day').add(1*i, 'minutes').format('H:mm:ss'))\n      }\n      return labels\n    },\n    fakeData() {\n      let data = [];\n      for(let i=this.datasetstart; i<this.datasetend-1; i++) {\n        if (Math.floor(i/20)%2) {\n          data.push(Math.floor(Math.random() * 40))\n        }\n        else {\n          data.push(Math.floor(Math.random() * (80 - 30 + 1)) + 30)\n        }\n      }\n      return data\n    },\n    clearAll() {\n      let labels = this.labels.slice(this.range[0], this.range[1]+1);\n      let dataset = this.dataset.slice(this.range[0],this.range[1]+1);\n      this.rangeselections = [];\n      this.data = {\n        labels: labels,\n        datasets: [{\n            label: 'Sonometria 1',\n            data: dataset,\n            borderColor: this.bordercolor,\n            borderWidth: 2,\n            backgroundColor: this.backgroundcolor,\n            fill: true\n          }\n        ]\n      };\n    },\n    setRange(a) {\n      console.log(a)\n      let start = a[0];\n      let end = a[1];\n      this.range = a;\n      let labels = this.labels.slice(start/60, (end+1)/60);\n      let datasets = [];\n      datasets.push(this.dataset.slice(start,end+1));\n\n      for(let i=0; i<this.rangeselections.length; i++) {\n        let selection = this.dataset.slice(this.rangeselections[i],this.rangeselections[i+1]+1);\n        let firstpart = Array(this.rangeselections[i]).fill(null);\n        let secondpart = Array(this.datasetend-this.rangeselections[i+1]).fill(null);\n        let d = firstpart.concat(selection).concat(secondpart)\n        datasets.push(d.slice(start,end+1));\n        i = i+1;\n      }\n\n      let backgrounds = [this.backgroundcolor, \"#FDD8358C\", \"#B39DDB8C\", \"#9FA8DA8C\", \"#EF9A9A8C\", \"#F48FB18C\", \"#CE93D88C\",'#80CBC48C','#BCAAA48C']\n      let sliceddatasets = [];\n      for(let i=0;i<datasets.length;i++) {\n        sliceddatasets.push(\n          {\n            data: datasets[i],\n            borderColor: this.bordercolor,\n            backgroundColor: backgrounds[i%backgrounds.length],\n            borderWidth: 2,\n            fill: true\n          }\n        )\n      }\n      this.data = {\n        labels: labels,\n        datasets: sliceddatasets\n      };\n      this.randombars = !this.randombars;\n    },\n    start(e,point) {\n///      let rect = this.chart.canvas.getBoundingClientRect()\n      this.selectionRect.startIndex = point._index+this.range[0];\n      this.selectionRect.startX = point._view.x;\n      this.selectionRect.startY = this.chart.chartArea.top+this.chart.canvas.offsetTop;\n\n    },\n    movement(evt,drag,point) {\n      //this.changecolors(Math.min(this.selectionRect.startIndex,this.selectionRect.stopIndex), Math.max(this.selectionRect.startIndex,this.selectionRect.stopIndex) )\n      let rect = this.overlay.canvas.getBoundingClientRect()\n      this.selectionContext = this.overlay\n\n      if (drag && this.selectionRect.stopIndex !== point._index && this.selectionRect.startIndex !== null) {\n        this.selectionRect.stopIndex = point._index+this.range[0];\n        this.selectionRect.w = (point._view.x) - this.selectionRect.startX;\n\n        this.selectionContext.globalAlpha = 0.5;\n        this.selectionContext.clearRect(0, 0, rect.width, rect.height);\n        this.selectionContext.fillRect(this.selectionRect.startX,\n          this.selectionRect.startY,\n          this.selectionRect.w,\n          this.chart.chartArea.bottom-this.chart.chartArea.top);\n      }\n      else if(this.selectionRect.startIndex == null) {\n        this.selectionRect.startY = this.chart.chartArea.top+this.chart.canvas.offsetTop;\n\n        this.selectionContext.clearRect(0, 0, rect.width, rect.height);\n\n        let x = point._view.x;\n\n        this.selectionContext.fillRect(x,this.chart.chartArea.top+this.chart.canvas.offsetTop,1,this.chart.chartArea.bottom-this.chart.chartArea.top);\n      }\n\n    },\n    stop() {\n      let rect = this.overlay.canvas.getBoundingClientRect()\n      this.selectionContext.clearRect(0, 0, rect.width, rect.height);\n      this.addNewSelection(Math.min(this.selectionRect.startIndex,this.selectionRect.stopIndex), Math.max(this.selectionRect.startIndex,this.selectionRect.stopIndex) )\n      this.selectionRect = {\n        w: 0,\n        startX: 0,\n        startY: 0,\n        startIndex: null,\n        stopIndex: null\n      };\n      this.selectable = false;\n    },\n    addNewSelection(min,max) {\n      this.rangeselections.push(min);\n      this.rangeselections.push(max);\n      this.setRange(this.range);\n    },\n    chartobject(e) {\n      this.chart = e;\n      const c = document.getElementById('overlay');\n      const ctx = c.getContext(\"2d\");\n      this.overlay = ctx;\n      this.overlay.canvas.width = this.chart.chart.width-12;\n      this.overlay.canvas.height = this.chart.chart.height+this.chart.canvas.getBoundingClientRect().y;\n    }\n  }\n}\n</script>\n\n<style>\n.selectable {\n  pointer-events:none;\n}\n</style>\n"],"sourceRoot":"src"}]}